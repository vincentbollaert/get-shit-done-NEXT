openapi: 3.1.0
info:
  title: Get Shit Done API
  description: API for managing tasks
  version: 1.0.0

servers:
  - url: /api/v1
    description: Next.js API routes

components:
  examples:
    Task:
      value:
        taskId: "task-1"
        name: "Task 1"
        time: [5, 8]
        timestamp: "Sat Feb 08 2025 00:00:00 GMT+0100 (Central European Standard Time)"
        category: "Work"
        userId: "test-user-1"
    
    TasksByDay:
      value:
        "Sat Feb 08 2025 00:00:00 GMT+0100 (Central European Standard Time)":
          tasks:
            - taskId: "task-1"
              name: "Task 1"
              time: [5, 8]
              timestamp: "Sat Feb 08 2025 00:00:00 GMT+0100 (Central European Standard Time)"
              category: "Work"
              userId: "test-user-1"
              
    Category:
      value:
        categoryId: "life admin"
        name: "Life admin"
        colorId: "plumWeb"
        userId: "test-user-1"
        
    CategoryList:
      value:
        - categoryId: "life admin"
          name: "Life admin"
          colorId: "plumWeb"
          userId: "test-user-1"
        - categoryId: "relax"
          name: "Relax"
          colorId: "middleBlueGreen"
          userId: "test-user-1"
        - categoryId: "work"
          name: "Work"
          colorId: "middleBlueGreen"
          userId: "test-user-1"
          
    Settings:
      value:
        settingsId: "settings-1"
        theme: "light"
        size: "normal"
        daysToShow: "1month"
        hoursToShow: [0, 23]
        isHomepage: false
        showGridLines: true
        showHourMarkers: true
        shouldScrollColumns: false
        hideCalendarInactive: false
        hideCalendarStartup: true
        shouldAutoLogout: true
        userId: "test-user-1"
        
    User:
      value:
        email: "user@example.com"
        password: "hashedPassword123"
  
  schemas:
    Task:
      type: object
      properties:
        taskId:
          type: string
          nullable: true
          description: Auto-generated ID for the task
        timestamp:
          type: string
          description: Date string representing the task's day
        name:
          type: string
          description: Name/title of the task
        category:
          type: string
          description: Category identifier for the task
        time:
          type: array
          items:
            type: number
          minItems: 2
          maxItems: 2
          description: Start and end hours of the task [startHour, endHour]
        userId:
          type: string
          description: ID of the user who owns this task
      required:
        - timestamp
        - name
        - category
        - time
        - userId
      example:
        default:
          $ref: '#/components/examples/Task'
        
    Category:
      type: object
      properties:
        categoryId:
          type: string
          nullable: true
          description: Auto-generated ID for the category
        name:
          type: string
          description: Display name of the category
        colorId:
          type: string
          description: Color identifier for the category
        userId:
          type: string
          description: ID of the user who owns this category
      required:
        - name
        - colorId
        - userId
      example:
        default:
          $ref: '#/components/examples/Category'
        
    Settings:
      type: object
      properties:
        theme:
          type: string
          enum: [light, dark, "high contrast"]
          description: UI theme preference
        size:
          type: string
          enum: [compact, normal, breath]
          description: UI size preference
        daysToShow:
          type: string
          enum: [1week, 3weeks, 1month]
          description: Calendar view range
        hoursToShow:
          type: array
          items:
            type: number
          minItems: 2
          maxItems: 2
          description: Start and end hours to display [startHour, endHour]
        isHomepage:
          type: boolean
          description: Whether calendar is set as homepage
        showGridLines:
          type: boolean
          description: Whether to display calendar grid lines
        showHourMarkers:
          type: boolean
          description: Whether to display hour markers
        shouldScrollColumns:
          type: boolean
          description: Whether columns should scroll
        hideCalendarInactive:
          type: boolean
          description: Whether to hide calendar when inactive
        hideCalendarStartup:
          type: boolean
          description: Whether to hide calendar on startup
        shouldAutoLogout:
          type: boolean
          description: Whether to enable auto logout
        userId:
          type: string
          description: ID of the user who owns these settings
      required:
        - theme
        - size
        - daysToShow
        - hoursToShow
        - isHomepage
        - showGridLines
        - showHourMarkers
        - shouldScrollColumns
        - hideCalendarInactive
        - hideCalendarStartup
        - shouldAutoLogout
        - userId
      example:
        default:
          $ref: '#/components/examples/Settings'
        
    User:
      type: object
      properties:
        userId:
          type: string
          nullable: true
          description: Auto-generated ID for the user
        email:
          type: string
          format: email
          description: User's email address
        password:
          type: string
          description: User's password (hashed in storage)
          writeOnly: true
      required:
        - email
        - password
      example:
        default:
          $ref: '#/components/examples/User'

paths:
  /tasks:
    get:
      summary: Get all tasks for a given month
      parameters:
        - name: month
          in: query
          required: true
          schema:
            type: string
          description: Month string to filter tasks (e.g. 'Feb')
          example: "Feb"
      responses:
        '200':
          description: Tasks grouped by day
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  properties:
                    tasks:
                      type: array
                      items:
                        $ref: '#/components/schemas/Task'
              examples:
                default:
                  $ref: '#/components/examples/TasksByDay'
    post:
      summary: Create a new task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
            examples:
              default:
                $ref: '#/components/examples/Task'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
              examples:
                default:
                  $ref: '#/components/examples/Task'
          
  /tasks/{taskId}:
    parameters:
      - name: taskId
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get a task by ID
      responses:
        '200':
          description: Task details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
    patch:
      summary: Update a task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '200':
          description: Task updated successfully
    delete:
      summary: Delete a task
      responses:
        '200':
          description: Task deleted successfully
          
  /categories:
    get:
      summary: Get all categories
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
              examples:
                default:
                  $ref: '#/components/examples/CategoryList'
    post:
      summary: Create a new category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '201':
          description: Category created successfully
          
  /categories/{categoryId}:
    parameters:
      - name: categoryId
        in: path
        required: true
        schema:
          type: string
    patch:
      summary: Update a category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: Category updated successfully
          
  /settings:
    get:
      summary: Get user settings
      responses:
        '200':
          description: User settings
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Settings'
                  - type: object
                    properties:
                      settingsId:
                        type: string
              examples:
                default:
                  $ref: '#/components/examples/Settings'
    patch:
      summary: Update user settings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Settings'
      responses:
        '200':
          description: Settings updated successfully
          
  /user:
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
    get:
      summary: Get current user
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
