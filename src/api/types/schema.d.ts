/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all tasks for a given month */
        get: {
            parameters: {
                query: {
                    /**
                     * @description Month string to filter tasks (e.g. 'Feb')
                     * @example Feb
                     */
                    month: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Tasks grouped by day */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: {
                                tasks?: components["schemas"]["Task"][];
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new task */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Task"];
                };
            };
            responses: {
                /** @description Task created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Task"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/{taskId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                taskId: string;
            };
            cookie?: never;
        };
        /** Get a task by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    taskId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Task details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Task"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a task */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    taskId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Task deleted successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        /** Update a task */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    taskId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Task"];
                };
            };
            responses: {
                /** @description Task updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all categories */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of categories */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Category"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a new category */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
            responses: {
                /** @description Category created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/categories/{categoryId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                categoryId: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update a category */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    categoryId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
            responses: {
                /** @description Category updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user settings */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User settings */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Settings"] & {
                            settingsId?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update user settings */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Settings"];
                };
            };
            responses: {
                /** @description Settings updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current user */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
            };
        };
        put?: never;
        /** Create a new user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            responses: {
                /** @description User created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @example {
         *       "default": {
         *         "$ref": "#/components/examples/Task"
         *       }
         *     } */
        Task: {
            /** @description Auto-generated ID for the task */
            taskId?: string | null;
            /** @description Date string representing the task's day */
            timestamp: string;
            /** @description Name/title of the task */
            name: string;
            /** @description Category identifier for the task */
            category: string;
            /** @description Start and end hours of the task [startHour, endHour] */
            time: number[];
            /** @description ID of the user who owns this task */
            userId: string;
        };
        /** @example {
         *       "default": {
         *         "$ref": "#/components/examples/Category"
         *       }
         *     } */
        Category: {
            /** @description Auto-generated ID for the category */
            categoryId?: string | null;
            /** @description Display name of the category */
            name: string;
            /** @description Color identifier for the category */
            colorId: string;
            /** @description ID of the user who owns this category */
            userId: string;
        };
        /** @example {
         *       "default": {
         *         "$ref": "#/components/examples/Settings"
         *       }
         *     } */
        Settings: {
            /**
             * @description UI theme preference
             * @enum {string}
             */
            theme: "light" | "dark" | "high contrast";
            /**
             * @description UI size preference
             * @enum {string}
             */
            size: "compact" | "normal" | "breath";
            /**
             * @description Calendar view range
             * @enum {string}
             */
            daysToShow: "1week" | "3weeks" | "1month";
            /** @description Start and end hours to display [startHour, endHour] */
            hoursToShow: number[];
            /** @description Whether calendar is set as homepage */
            isHomepage: boolean;
            /** @description Whether to display calendar grid lines */
            showGridLines: boolean;
            /** @description Whether to display hour markers */
            showHourMarkers: boolean;
            /** @description Whether columns should scroll */
            shouldScrollColumns: boolean;
            /** @description Whether to hide calendar when inactive */
            hideCalendarInactive: boolean;
            /** @description Whether to hide calendar on startup */
            hideCalendarStartup: boolean;
            /** @description Whether to enable auto logout */
            shouldAutoLogout: boolean;
            /** @description ID of the user who owns these settings */
            userId: string;
        };
        /** @example {
         *       "default": {
         *         "$ref": "#/components/examples/User"
         *       }
         *     } */
        User: {
            /** @description Auto-generated ID for the user */
            userId?: string | null;
            /**
             * Format: email
             * @description User's email address
             */
            email: string;
            /** @description User's password (hashed in storage) */
            password: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
